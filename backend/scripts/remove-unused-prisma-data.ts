import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function fixQuotationItemNulls() {
  console.log('üîß CORRIGINDO QUOTATIONITEMS COM QUOTATIONID NULL')
  console.log('================================================\n')

  try {
    // Verificar quantos QuotationItems t√™m quotationId NULL
    console.log('üîç Verificando QuotationItems problem√°ticos...')
    
    const nullCountQuery = await prisma.$queryRaw<Array<{count: bigint}>>`
      SELECT COUNT(*) as count
      FROM "QuotationItem" 
      WHERE "quotationId" IS NULL
    `
    
    const nullCount = Number(nullCountQuery[0]?.count || 0)
    console.log(`üìä QuotationItems com quotationId NULL: ${nullCount}`)
    
    if (nullCount === 0) {
      console.log('‚úÖ Nenhum QuotationItem problem√°tico encontrado!')
      console.log('Voc√™ pode executar: npx prisma db push')
      return
    }

    // Mostrar alguns exemplos dos registros problem√°ticos
    console.log('\nüìã Exemplos de QuotationItems que ser√£o removidos:')
    
    const examplesQuery = await prisma.$queryRaw<Array<{
      id: string
      itemId: string
      quantity: number
      createdAt: Date
    }>>`
      SELECT 
        qi.id,
        qi."itemId",
        qi.quantity,
        qi."createdAt"
      FROM "QuotationItem" qi
      WHERE qi."quotationId" IS NULL
      ORDER BY qi."createdAt" DESC
      LIMIT 5
    `

    examplesQuery.forEach((item, index) => {
      console.log(`${index + 1}. ID: ${item.id}`)
      console.log(`   ItemId: ${item.itemId}`)
      console.log(`   Quantidade: ${item.quantity}`)
      console.log(`   Criado: ${item.createdAt}`)
      console.log()
    })

    if (nullCount > 5) {
      console.log(`   ... e mais ${nullCount - 5} registros similares`)
      console.log()
    }

    // Perguntar confirma√ß√£o (em ambiente real, voc√™ pode pular isso)
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Estes QuotationItems ser√£o REMOVIDOS permanentemente!')
    console.log('Esta √© a √∫nica forma de resolver o problema de schema.')
    console.log()

    // Executar a remo√ß√£o
    console.log('üóëÔ∏è  Removendo QuotationItems com quotationId NULL...')
    
    const deleteResult = await prisma.$executeRaw`
      DELETE FROM "QuotationItem" 
      WHERE "quotationId" IS NULL
    `

    console.log(`‚úÖ ${deleteResult} QuotationItems removidos com sucesso!`)

    // Verifica√ß√£o final
    const finalCountQuery = await prisma.$queryRaw<Array<{count: bigint}>>`
      SELECT COUNT(*) as count
      FROM "QuotationItem" 
      WHERE "quotationId" IS NULL
    `
    
    const finalCount = Number(finalCountQuery[0]?.count || 0)

    if (finalCount === 0) {
      console.log('\nüéâ PROBLEMA RESOLVIDO!')
      console.log('=====================')
      console.log('‚úÖ Todos os QuotationItems agora t√™m quotationId v√°lido')
      console.log('‚úÖ Voc√™ pode executar: npx prisma db push')
      console.log('‚úÖ Depois: npx prisma migrate dev')
    } else {
      console.log(`\n‚ö†Ô∏è  Ainda restam ${finalCount} QuotationItems problem√°ticos`)
      console.log('Execute o script novamente se necess√°rio.')
    }

  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o:', error)
    
    console.log('\nüí° SOLU√á√ÉO ALTERNATIVA:')
    console.log('======================')
    console.log('Execute diretamente no banco:')
    console.log('DELETE FROM "QuotationItem" WHERE "quotationId" IS NULL;')
  }
}

async function main() {
  console.log('üîß CORRETOR DE QUOTATIONITEM - VERS√ÉO SIMPLES')
  console.log('==============================================\n')
  
  await fixQuotationItemNulls()
  await prisma.$disconnect()
}

main().catch(async (error) => {
  console.error('‚ùå Erro:', error)
  await prisma.$disconnect()
  process.exit(1)
})